dependencies {
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile project(':janusgraph-core')
    compile project(':janusgraph-hadoop')
    compile 'org.apache.cassandra:cassandra-all:2.2.13'
    compile 'com.datastax.cassandra:cassandra-driver-core:3.7.2'
    compile 'io.vavr:vavr:0.9.0'
    testCompile project(':janusgraph-backend-testutils')
    testCompile project(path: ':janusgraph-hadoop', configuration: 'testOutput')
    testCompile 'net.java.dev.jna:jna:4.0.0'
    testCompile 'com.github.jbellis:jamm:0.3.0'
    testCompile 'org.testcontainers:testcontainers'
    testCompile 'org.testcontainers:cassandra'
    testCompile 'org.testcontainers:junit-jupiter'
}

description = 'JanusGraph-CQL: Distributed Graph Database'

configurations {
    testOutput.extendsFrom(testCompile)
}

task jarTest(type: Jar, dependsOn: testClasses) {
    from sourceSets.test.output
    classifier = 'test'
}

test {
    if (!hasProperty('testProfile')) ext.testProfile = 'cassandra3-murmur'

    def cassandraDockerImage = 'cassandra'
    def cassandra3DockerVersion = '3.11.4'
    def cassandra2DockerVersion = '2.2.14'
    def cassandraDockerVersion = cassandra3DockerVersion
    def cassandraDockerPartitionerMurmur = 'murmur'
    def cassandraDockerPartitionerByteordered = 'byteordered'
    def cassandraDockerPartitioner = cassandraDockerPartitionerMurmur
    def cassandraDockerUseSSL = false
    def cassandraDockerEnableClientAuth = false
    def cassandraDockerUseDefaultConfigFromImage = false

    switch (testProfile) {
        case 'cassandra2-murmur':
            cassandraDockerVersion = cassandra2DockerVersion
            break
        case 'cassandra2-murmur-ssl':
            cassandraDockerVersion = cassandra2DockerVersion
            cassandraDockerUseSSL = true
            break
        case 'cassandra3-murmur-ssl':
            cassandraDockerUseSSL = true
            break
        case 'cassandra3-murmur-client-auth':
            cassandraDockerUseSSL = true
            cassandraDockerEnableClientAuth = true
            break
        case 'cassandra2-byteordered':
            cassandraDockerVersion = cassandra2DockerVersion
            cassandraDockerPartitioner = cassandraDockerPartitionerByteordered
            break
        case 'cassandra3-byteordered':
            cassandraDockerPartitioner = cassandraDockerPartitionerByteordered
            break
        case 'scylladb':
            cassandraDockerImage = 'scylladb/scylla'
            cassandraDockerVersion = '3.0.9'
            cassandraDockerUseDefaultConfigFromImage = true
            break
    }

    filter {
        if (cassandraDockerPartitioner == cassandraDockerPartitionerByteordered) {
            excludeTestsMatching "org.janusgraph.hadoop*"
        }
    }
    useJUnitPlatform {
        excludeTags 'MEMORY_TESTS', 'PERFORMANCE_TESTS', 'BRITTLE_TESTS', 'SERIAL_TESTS'

        systemProperty('junit.jupiter.execution.parallel.enabled', false)
        systemProperty('cassandra.docker.image', cassandraDockerImage)
        systemProperty('cassandra.docker.version', cassandraDockerVersion)
        systemProperty('cassandra.docker.partitioner', cassandraDockerPartitioner)
        systemProperty('cassandra.docker.useSSL', cassandraDockerUseSSL)
        systemProperty('cassandra.docker.enableClientAuth', cassandraDockerEnableClientAuth)
        systemProperty('cassandra.docker.useDefaultConfigFromImage', cassandraDockerUseDefaultConfigFromImage)
    }
}

artifacts {
    testOutput jarTest
}
